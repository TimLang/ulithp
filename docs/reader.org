#+TITLE:     μLithp reader
#+AUTHOR:    Fogus
#+EMAIL:     me@fogus.me
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+INCLUDE: header/header.org org

* Extending μLithp with a reader

You can, if you choose, write μLithp code directly using Ruby arrays and symbols.  However, writing a reader that reads in a more traditional textual Lisp-like syntax and converts it into the Ruby data structures.  My friend [[http://www.eloquentruby.com][Russ Olsen]] wrote a little reader, that I present below:

** Reader

#+name: reader
#+begin_src ruby :tangle ../src/reader.rb :noweb yes 
class Reader
  def initialize(expression)
    @tokens = expression.scan /[()]|\w+|".*?"|'.*?'/
  end

  def peek
    @tokens.first
  end

  def next_token
    @tokens.shift
  end

  def read
    if (token = next_token) == '('
      read_list
    elsif token =~ /['"].*/
      token[1..-2]
    elsif token =~ /\d+/
      token.to_i
    else
      token.to_sym
    end
  end

  def read_list
    list = []
    list << read until peek == ')'
    next_token
    list
  end
end
#+end_src

** Usage

Using the ~Reader~ class is simple as the following:

#+begin_src ruby
require 'lithp'
require 'reader'

Reader.new("(quote (1 2 3))").read
#=> [:quote, [1, 2, 3]]

l.eval Reader.new("(quote (1 2 3))").read
#=> [1, 2, 3]
#+end_src

And that's it.

